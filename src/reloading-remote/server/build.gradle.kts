///////////////////////////////////////////////////////////////////////////////
//  GRADLE CONFIGURATION
///////////////////////////////////////////////////////////////////////////////

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  java
  id("com.diffplug.spotless") version "7.0.4"
  id("io.quarkus") version "1.8.1.Final"
}

///////////////////////////////////////////////////////////////////////////////
//  APP CONFIGURATION
///////////////////////////////////////////////////////////////////////////////

dependencies {
  // Demo common
  implementation(project(":common"))

  // Begin Keyple configuration (generated by
  // 'https://keyple.org/components/overview/configuration-wizard/')
  implementation("org.eclipse.keypop:keypop-reader-java-api:2.0.1")
  implementation("org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2")
  implementation("org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0")
  implementation("org.eclipse.keyple:keyple-common-java-api:2.0.2")
  implementation("org.eclipse.keyple:keyple-util-java-lib:2.4.0")
  implementation("org.eclipse.keyple:keyple-service-java-lib:3.3.5")
  implementation("org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0")
  implementation("org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1")
  implementation("org.eclipse.keyple:keyple-distributed-remote-java-lib:2.5.1")
  implementation("org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.8")
  implementation("org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0")
  implementation("org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.5.2")
  // End Keyple configuration
  implementation("org.eclipse.keypop:keypop-storagecard-java-api:0.3.0")

  // CNA specific components
  implementation(fileTree(mapOf("dir" to "../../../libs", "include" to listOf("*.jar"))))

  // Quarkus
  implementation(enforcedPlatform("io.quarkus:quarkus-universe-bom:1.8.1.Final"))
  implementation("io.quarkus:quarkus-resteasy-jsonb")
  implementation("io.quarkus:quarkus-resteasy")
  // Google GSON
  implementation("com.google.code.gson:gson:2.10.1")
  // Logging
  implementation("org.slf4j:slf4j-api:1.7.32")
  implementation("org.slf4j:slf4j-simple:1.7.32")
}

val buildDashboard by
    tasks.creating(Exec::class) {
      workingDir = File("dashboard-app")
      var npm = "npm"
      if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = "npm.cmd"
      }
      commandLine(npm, "run", "build")
    }
val copyDashboard by
    tasks.creating(Copy::class) {
      from("dashboard-app/build")
      into("build/resources/main/META-INF/resources")
      dependsOn.add("buildDashboard")
    }
val startServer by
    tasks.creating(Exec::class) {
      group = "server"
      workingDir = File("build")
      commandLine("java", "-jar", "${quarkus.finalName()}-full.jar")
    }

tasks {
  clean { delete("dashboard-app/build") }
  jar { dependsOn.add("copyDashboard") }
}

///////////////////////////////////////////////////////////////////////////////
//  STANDARD CONFIGURATION FOR JAVA PROJECTS
///////////////////////////////////////////////////////////////////////////////

if (project.hasProperty("releaseTag")) {
  project.version = project.property("releaseTag") as String
  println("Release mode: version set to ${project.version}")
} else {
  println("Development mode: version is ${project.version}")
}

val javaSourceLevel: String by project
val javaTargetLevel: String by project

java {
  sourceCompatibility = JavaVersion.toVersion(javaSourceLevel)
  targetCompatibility = JavaVersion.toVersion(javaTargetLevel)
  println("Compiling Java $sourceCompatibility to Java $targetCompatibility.")
}

tasks {
  spotless {
    java {
      target("src/**/*.java")
      licenseHeaderFile("../../../LICENSE_HEADER")
      importOrder("java", "javax", "org", "com", "")
      removeUnusedImports()
      googleJavaFormat()
    }
    kotlinGradle {
      target("**/*.kts")
      ktfmt()
    }
  }
  test {
    useJUnitPlatform()
    testLogging { events("passed", "skipped", "failed") }
  }
}
