///////////////////////////////////////////////////////////////////////////////
//  GRADLE CONFIGURATION
///////////////////////////////////////////////////////////////////////////////

plugins {
  id("com.android.application")
  id("kotlin-android")
  id("kotlin-parcelize")
  kotlin("kapt")
  id("com.diffplug.spotless")
}

///////////////////////////////////////////////////////////////////////////////
//  APP CONFIGURATION
///////////////////////////////////////////////////////////////////////////////

configurations.all { exclude(group = "com.arcao", module = "slf4j-timber") }

dependencies {
  // Demo common
  implementation(project(":common"))
  // Begin Keyple configuration (generated by
  // 'https://keyple.org/components/overview/configuration-wizard/')
  implementation("org.eclipse.keypop:keypop-reader-java-api:2.0.1")
  implementation("org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2")
  implementation("org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0")
  implementation("org.eclipse.keypop:keypop-storagecard-java-api:0.2.0")
  implementation("org.eclipse.keyple:keyple-common-java-api:2.0.2")
  implementation("org.eclipse.keyple:keyple-plugin-storagecard-java-api:1.0.0")
  implementation("org.eclipse.keyple:keyple-util-java-lib:2.4.0")
  implementation("org.eclipse.keyple:keyple-service-java-lib:3.3.5")
  implementation("org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.8")
  implementation("org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0")
  implementation("org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1")
  implementation("org.eclipse.keyple:keyple-distributed-local-java-lib:2.5.2")
  implementation("org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.8")
  implementation("org.eclipse.keyple:keyple-plugin-android-nfc-java-lib:3.1.0")
  implementation("org.eclipse.keyple:keyple-plugin-android-omapi-java-lib:2.1.0")
  // End Keyple configuration
  // Keyple reader plugins proprietary libs
  implementation(fileTree(mapOf("dir" to "../../../../../libs", "include" to listOf("*.jar", "*.aar"))))
  // Android components
  implementation("androidx.appcompat:appcompat:1.6.1")
  implementation("com.google.android.material:material:1.10.0")
  implementation("androidx.constraintlayout:constraintlayout:2.1.4")
  implementation("androidx.activity:activity-ktx:1.8.1")
  implementation("androidx.fragment:fragment-ktx:1.6.2")
  implementation("androidx.multidex:multidex:2.0.1")
  // Kotlin
  implementation("androidx.core:core-ktx:1.12.0")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.20")
  // Coroutines
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
  // Dagger dependencies
  kapt("com.google.dagger:dagger-compiler:2.19")
  annotationProcessor("com.google.dagger:dagger-compiler:2.19")
  kapt("com.google.dagger:dagger-android-processor:2.19")
  annotationProcessor("com.google.dagger:dagger-android-processor:2.19")
  implementation("com.google.dagger:dagger:2.19")
  implementation("com.google.dagger:dagger-android:2.19")
  implementation("com.google.dagger:dagger-android-support:2.19")
  compileOnly("org.glassfish:javax.annotation:10.0-b28")
  // RxJava
  implementation("io.reactivex.rxjava2:rxjava:2.1.13")
  implementation("io.reactivex.rxjava2:rxandroid:2.0.2")
  // Retrofit
  implementation("com.squareup.retrofit2:retrofit:2.9.0")
  implementation("com.squareup.retrofit2:converter-gson:2.4.0")
  implementation("com.squareup.retrofit2:converter-scalars:2.4.0")
  implementation("com.squareup.retrofit2:adapter-rxjava2:2.4.0")
  implementation("com.squareup.okhttp3:logging-interceptor:3.9.1")
  // Server status
  implementation("org.greenrobot:eventbus:3.2.0") // to easily handle server status change
  // Lottie
  implementation("com.airbnb.android:lottie:3.4.4")
  // Google GSON
  implementation("com.google.code.gson:gson:2.10.1")
  // Devnied - Byte Utils
  implementation("com.github.devnied:bit-lib4j:1.4.5") { exclude(group = "org.slf4j") }
  // Logging
  implementation("com.jakewharton.timber:timber:5.0.1")
  implementation("org.slf4j:slf4j-api:1.7.32")
  implementation("uk.uuid.slf4j:slf4j-android:1.7.32-0")
}

///////////////////////////////////////////////////////////////////////////////
//  STANDARD CONFIGURATION FOR ANDROID APPLICATION KOTLIN-BASED PROJECTS
///////////////////////////////////////////////////////////////////////////////

if (project.hasProperty("releaseTag")) {
  project.version = project.property("releaseTag") as String
  println("Release mode: version set to ${project.version}")
} else {
  println("Development mode: version is ${project.version}")
}

val javaSourceLevel: String by project
val javaTargetLevel: String by project

android {
  namespace = project.findProperty("androidAppNamespace") as String
  compileSdk = (project.findProperty("androidCompileSdk") as String).toInt()
  defaultConfig {
    applicationId = project.findProperty("androidAppId") as String
    minSdk = (project.findProperty("androidMinSdk") as String).toInt()
    targetSdk = (project.findProperty("androidCompileSdk") as String).toInt()
    versionCode = (project.findProperty("androidAppVersionCode") as String).toInt()
    versionName = project.findProperty("androidAppVersionName") as String
  }
  buildFeatures { viewBinding = true }
  buildTypes {
    getByName("release") {
      isMinifyEnabled = false
      proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
    }
  }
  compileOptions {
    sourceCompatibility = JavaVersion.toVersion(javaSourceLevel)
    targetCompatibility = JavaVersion.toVersion(javaTargetLevel)
    println("Compiling Java $sourceCompatibility to Java $targetCompatibility")
  }
  kotlinOptions { jvmTarget = javaTargetLevel }
  sourceSets {
    getByName("main").java.srcDirs("src/main/kotlin")
    getByName("debug").java.srcDirs("src/debug/kotlin")
  }
  packagingOptions {
    // Exclude 'META-INF/NOTICE.md' to resolve the conflict that occurs when multiple dependencies
    // include this file
    resources.excludes.add("META-INF/NOTICE.md")
  }
  applicationVariants.all {
    outputs.all {
      val outputImpl = this as com.android.build.gradle.internal.api.ApkVariantOutputImpl
      val variantName = name
      val versionName = project.version.toString()
      val newName = "${rootProject.name}-$versionName-$variantName.apk"
      outputImpl.outputFileName = newName
    }
  }
  lint { abortOnError = false }
}

tasks.withType<AbstractArchiveTask>().configureEach { archiveBaseName.set(rootProject.name) }

tasks {
  spotless {
    kotlin {
      target("src/**/*.kt")
      licenseHeaderFile("../../../../LICENSE_HEADER")
      ktfmt()
    }
    kotlinGradle {
      target("**/*.kts")
      ktfmt()
    }
  }
}
